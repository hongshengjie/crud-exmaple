// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.0
// - protoc             v3.14.0
// source: proto/alltypetable.api.proto

package api

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
)

var allTypeTableServiceHTTP AllTypeTableServiceHTTPServer

// AllTypeTableServiceHTTPServer is the server API for AllTypeTableService service.
type AllTypeTableServiceHTTPServer interface {
	CreateAllTypeTable(context.Context, *AllTypeTable) (*AllTypeTable, error)
	DeleteAllTypeTable(context.Context, *AllTypeTableId) (*emptypb.Empty, error)
	UpdateAllTypeTable(context.Context, *UpdateAllTypeTableReq) (*AllTypeTable, error)
	GetAllTypeTable(context.Context, *AllTypeTableId) (*AllTypeTable, error)
	ListAllTypeTables(context.Context, *ListAllTypeTablesReq) (*ListAllTypeTablesResp, error)
}

func allTypeTableServiceCreateAllTypeTable(c *gin.Context) {
	a := &AllTypeTable{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	type Status struct {
		Code    int32       `json:"code"`
		Message string      `json:"message"`
		Data    interface{} `json:"data"`
	}
	status := &Status{}
	if err != nil {
		status.Code = http.StatusBadRequest
		status.Message = err.Error()
		c.JSON(http.StatusBadRequest, status)
		return
	}
	resp, err := allTypeTableServiceHTTP.CreateAllTypeTable(c, a)
	if err != nil {
		status.Code = http.StatusInternalServerError
		status.Message = err.Error()
		c.JSON(http.StatusInternalServerError, status)
		return
	}
	status.Data = resp
	c.JSON(http.StatusOK, status)
}
func allTypeTableServiceDeleteAllTypeTable(c *gin.Context) {
	a := &AllTypeTableId{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	type Status struct {
		Code    int32       `json:"code"`
		Message string      `json:"message"`
		Data    interface{} `json:"data"`
	}
	status := &Status{}
	if err != nil {
		status.Code = http.StatusBadRequest
		status.Message = err.Error()
		c.JSON(http.StatusBadRequest, status)
		return
	}
	resp, err := allTypeTableServiceHTTP.DeleteAllTypeTable(c, a)
	if err != nil {
		status.Code = http.StatusInternalServerError
		status.Message = err.Error()
		c.JSON(http.StatusInternalServerError, status)
		return
	}
	status.Data = resp
	c.JSON(http.StatusOK, status)
}
func allTypeTableServiceUpdateAllTypeTable(c *gin.Context) {
	a := &UpdateAllTypeTableReq{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	type Status struct {
		Code    int32       `json:"code"`
		Message string      `json:"message"`
		Data    interface{} `json:"data"`
	}
	status := &Status{}
	if err != nil {
		status.Code = http.StatusBadRequest
		status.Message = err.Error()
		c.JSON(http.StatusBadRequest, status)
		return
	}
	resp, err := allTypeTableServiceHTTP.UpdateAllTypeTable(c, a)
	if err != nil {
		status.Code = http.StatusInternalServerError
		status.Message = err.Error()
		c.JSON(http.StatusInternalServerError, status)
		return
	}
	status.Data = resp
	c.JSON(http.StatusOK, status)
}
func allTypeTableServiceGetAllTypeTable(c *gin.Context) {
	a := &AllTypeTableId{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	type Status struct {
		Code    int32       `json:"code"`
		Message string      `json:"message"`
		Data    interface{} `json:"data"`
	}
	status := &Status{}
	if err != nil {
		status.Code = http.StatusBadRequest
		status.Message = err.Error()
		c.JSON(http.StatusBadRequest, status)
		return
	}
	resp, err := allTypeTableServiceHTTP.GetAllTypeTable(c, a)
	if err != nil {
		status.Code = http.StatusInternalServerError
		status.Message = err.Error()
		c.JSON(http.StatusInternalServerError, status)
		return
	}
	status.Data = resp
	c.JSON(http.StatusOK, status)
}
func allTypeTableServiceListAllTypeTables(c *gin.Context) {
	a := &ListAllTypeTablesReq{}
	err := c.BindWith(a, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type")))
	type Status struct {
		Code    int32       `json:"code"`
		Message string      `json:"message"`
		Data    interface{} `json:"data"`
	}
	status := &Status{}
	if err != nil {
		status.Code = http.StatusBadRequest
		status.Message = err.Error()
		c.JSON(http.StatusBadRequest, status)
		return
	}
	resp, err := allTypeTableServiceHTTP.ListAllTypeTables(c, a)
	if err != nil {
		status.Code = http.StatusInternalServerError
		status.Message = err.Error()
		c.JSON(http.StatusInternalServerError, status)
		return
	}
	status.Data = resp
	c.JSON(http.StatusOK, status)
}
func RegisterAllTypeTableServiceHTTP(e *gin.Engine, svr AllTypeTableServiceHTTPServer, middleware map[string][]gin.HandlerFunc) {
	allTypeTableServiceHTTP = svr
	e.POST("/example.AllTypeTableService/CreateAllTypeTable", append(middleware["/example.AllTypeTableService/CreateAllTypeTable"], allTypeTableServiceCreateAllTypeTable)...)
	e.POST("/example.AllTypeTableService/DeleteAllTypeTable", append(middleware["/example.AllTypeTableService/DeleteAllTypeTable"], allTypeTableServiceDeleteAllTypeTable)...)
	e.POST("/example.AllTypeTableService/UpdateAllTypeTable", append(middleware["/example.AllTypeTableService/UpdateAllTypeTable"], allTypeTableServiceUpdateAllTypeTable)...)
	e.GET("/example.AllTypeTableService/GetAllTypeTable", append(middleware["/example.AllTypeTableService/GetAllTypeTable"], allTypeTableServiceGetAllTypeTable)...)
	e.GET("/example.AllTypeTableService/ListAllTypeTables", append(middleware["/example.AllTypeTableService/ListAllTypeTables"], allTypeTableServiceListAllTypeTables)...)
}
