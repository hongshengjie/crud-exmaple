// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AllTypeTableServiceClient is the client API for AllTypeTableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllTypeTableServiceClient interface {
	CreateAllTypeTable(ctx context.Context, in *AllTypeTable, opts ...grpc.CallOption) (*AllTypeTable, error)
	DeleteAllTypeTable(ctx context.Context, in *AllTypeTableId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAllTypeTable(ctx context.Context, in *UpdateAllTypeTableReq, opts ...grpc.CallOption) (*AllTypeTable, error)
	GetAllTypeTable(ctx context.Context, in *AllTypeTableId, opts ...grpc.CallOption) (*AllTypeTable, error)
	ListAllTypeTables(ctx context.Context, in *ListAllTypeTablesReq, opts ...grpc.CallOption) (*ListAllTypeTablesResp, error)
}

type allTypeTableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllTypeTableServiceClient(cc grpc.ClientConnInterface) AllTypeTableServiceClient {
	return &allTypeTableServiceClient{cc}
}

func (c *allTypeTableServiceClient) CreateAllTypeTable(ctx context.Context, in *AllTypeTable, opts ...grpc.CallOption) (*AllTypeTable, error) {
	out := new(AllTypeTable)
	err := c.cc.Invoke(ctx, "/example.AllTypeTableService/CreateAllTypeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allTypeTableServiceClient) DeleteAllTypeTable(ctx context.Context, in *AllTypeTableId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/example.AllTypeTableService/DeleteAllTypeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allTypeTableServiceClient) UpdateAllTypeTable(ctx context.Context, in *UpdateAllTypeTableReq, opts ...grpc.CallOption) (*AllTypeTable, error) {
	out := new(AllTypeTable)
	err := c.cc.Invoke(ctx, "/example.AllTypeTableService/UpdateAllTypeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allTypeTableServiceClient) GetAllTypeTable(ctx context.Context, in *AllTypeTableId, opts ...grpc.CallOption) (*AllTypeTable, error) {
	out := new(AllTypeTable)
	err := c.cc.Invoke(ctx, "/example.AllTypeTableService/GetAllTypeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allTypeTableServiceClient) ListAllTypeTables(ctx context.Context, in *ListAllTypeTablesReq, opts ...grpc.CallOption) (*ListAllTypeTablesResp, error) {
	out := new(ListAllTypeTablesResp)
	err := c.cc.Invoke(ctx, "/example.AllTypeTableService/ListAllTypeTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllTypeTableServiceServer is the server API for AllTypeTableService service.
// All implementations must embed UnimplementedAllTypeTableServiceServer
// for forward compatibility
type AllTypeTableServiceServer interface {
	CreateAllTypeTable(context.Context, *AllTypeTable) (*AllTypeTable, error)
	DeleteAllTypeTable(context.Context, *AllTypeTableId) (*emptypb.Empty, error)
	UpdateAllTypeTable(context.Context, *UpdateAllTypeTableReq) (*AllTypeTable, error)
	GetAllTypeTable(context.Context, *AllTypeTableId) (*AllTypeTable, error)
	ListAllTypeTables(context.Context, *ListAllTypeTablesReq) (*ListAllTypeTablesResp, error)
	mustEmbedUnimplementedAllTypeTableServiceServer()
}

// UnimplementedAllTypeTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAllTypeTableServiceServer struct {
}

func (UnimplementedAllTypeTableServiceServer) CreateAllTypeTable(context.Context, *AllTypeTable) (*AllTypeTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllTypeTable not implemented")
}
func (UnimplementedAllTypeTableServiceServer) DeleteAllTypeTable(context.Context, *AllTypeTableId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTypeTable not implemented")
}
func (UnimplementedAllTypeTableServiceServer) UpdateAllTypeTable(context.Context, *UpdateAllTypeTableReq) (*AllTypeTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllTypeTable not implemented")
}
func (UnimplementedAllTypeTableServiceServer) GetAllTypeTable(context.Context, *AllTypeTableId) (*AllTypeTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTypeTable not implemented")
}
func (UnimplementedAllTypeTableServiceServer) ListAllTypeTables(context.Context, *ListAllTypeTablesReq) (*ListAllTypeTablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllTypeTables not implemented")
}
func (UnimplementedAllTypeTableServiceServer) mustEmbedUnimplementedAllTypeTableServiceServer() {}

// UnsafeAllTypeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllTypeTableServiceServer will
// result in compilation errors.
type UnsafeAllTypeTableServiceServer interface {
	mustEmbedUnimplementedAllTypeTableServiceServer()
}

func RegisterAllTypeTableServiceServer(s grpc.ServiceRegistrar, srv AllTypeTableServiceServer) {
	s.RegisterService(&AllTypeTableService_ServiceDesc, srv)
}

func _AllTypeTableService_CreateAllTypeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTypeTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllTypeTableServiceServer).CreateAllTypeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AllTypeTableService/CreateAllTypeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllTypeTableServiceServer).CreateAllTypeTable(ctx, req.(*AllTypeTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllTypeTableService_DeleteAllTypeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTypeTableId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllTypeTableServiceServer).DeleteAllTypeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AllTypeTableService/DeleteAllTypeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllTypeTableServiceServer).DeleteAllTypeTable(ctx, req.(*AllTypeTableId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllTypeTableService_UpdateAllTypeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllTypeTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllTypeTableServiceServer).UpdateAllTypeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AllTypeTableService/UpdateAllTypeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllTypeTableServiceServer).UpdateAllTypeTable(ctx, req.(*UpdateAllTypeTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllTypeTableService_GetAllTypeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTypeTableId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllTypeTableServiceServer).GetAllTypeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AllTypeTableService/GetAllTypeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllTypeTableServiceServer).GetAllTypeTable(ctx, req.(*AllTypeTableId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllTypeTableService_ListAllTypeTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllTypeTablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllTypeTableServiceServer).ListAllTypeTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AllTypeTableService/ListAllTypeTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllTypeTableServiceServer).ListAllTypeTables(ctx, req.(*ListAllTypeTablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AllTypeTableService_ServiceDesc is the grpc.ServiceDesc for AllTypeTableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllTypeTableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.AllTypeTableService",
	HandlerType: (*AllTypeTableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAllTypeTable",
			Handler:    _AllTypeTableService_CreateAllTypeTable_Handler,
		},
		{
			MethodName: "DeleteAllTypeTable",
			Handler:    _AllTypeTableService_DeleteAllTypeTable_Handler,
		},
		{
			MethodName: "UpdateAllTypeTable",
			Handler:    _AllTypeTableService_UpdateAllTypeTable_Handler,
		},
		{
			MethodName: "GetAllTypeTable",
			Handler:    _AllTypeTableService_GetAllTypeTable_Handler,
		},
		{
			MethodName: "ListAllTypeTables",
			Handler:    _AllTypeTableService_ListAllTypeTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/alltypetable.api.proto",
}
