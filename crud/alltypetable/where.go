// Code generated by bcurd. DO NOT EDIT.

package alltypetable

import (
	"github.com/hongshengjie/crud/xsql"
)

type AllTypeTableWhere func(s *xsql.Selector)

// IdEQ  =
func IdEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(Id, arg))
	})
}

// IdNEQ <>
func IdNEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(Id, arg))
	})
}

// IdLT <
func IdLT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(Id, arg))
	})
}

// IdLET <=
func IdLTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(Id, arg))
	})
}

// IdGT >
func IdGT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(Id, arg))
	})
}

// IdGTE >=
func IdGTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(Id, arg))
	})
}

// IdIn in(...)
func IdIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(Id, v...))
	})
}

// IdNotIn not in(...)
func IdNotIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(Id, v...))
	})
}

// TIntEQ  =
func TIntEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(TInt, arg))
	})
}

// TIntNEQ <>
func TIntNEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(TInt, arg))
	})
}

// TIntLT <
func TIntLT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(TInt, arg))
	})
}

// TIntLET <=
func TIntLTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(TInt, arg))
	})
}

// TIntGT >
func TIntGT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(TInt, arg))
	})
}

// TIntGTE >=
func TIntGTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(TInt, arg))
	})
}

// TIntIn in(...)
func TIntIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(TInt, v...))
	})
}

// TIntNotIn not in(...)
func TIntNotIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(TInt, v...))
	})
}

// SIntEQ  =
func SIntEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(SInt, arg))
	})
}

// SIntNEQ <>
func SIntNEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(SInt, arg))
	})
}

// SIntLT <
func SIntLT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(SInt, arg))
	})
}

// SIntLET <=
func SIntLTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(SInt, arg))
	})
}

// SIntGT >
func SIntGT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(SInt, arg))
	})
}

// SIntGTE >=
func SIntGTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(SInt, arg))
	})
}

// SIntIn in(...)
func SIntIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(SInt, v...))
	})
}

// SIntNotIn not in(...)
func SIntNotIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(SInt, v...))
	})
}

// MIntEQ  =
func MIntEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(MInt, arg))
	})
}

// MIntNEQ <>
func MIntNEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(MInt, arg))
	})
}

// MIntLT <
func MIntLT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(MInt, arg))
	})
}

// MIntLET <=
func MIntLTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(MInt, arg))
	})
}

// MIntGT >
func MIntGT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(MInt, arg))
	})
}

// MIntGTE >=
func MIntGTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(MInt, arg))
	})
}

// MIntIn in(...)
func MIntIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(MInt, v...))
	})
}

// MIntNotIn not in(...)
func MIntNotIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(MInt, v...))
	})
}

// BIntEQ  =
func BIntEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(BInt, arg))
	})
}

// BIntNEQ <>
func BIntNEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(BInt, arg))
	})
}

// BIntLT <
func BIntLT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(BInt, arg))
	})
}

// BIntLET <=
func BIntLTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(BInt, arg))
	})
}

// BIntGT >
func BIntGT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(BInt, arg))
	})
}

// BIntGTE >=
func BIntGTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(BInt, arg))
	})
}

// BIntIn in(...)
func BIntIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(BInt, v...))
	})
}

// BIntNotIn not in(...)
func BIntNotIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(BInt, v...))
	})
}

// F32EQ  =
func F32EQ(arg float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(F32, arg))
	})
}

// F32NEQ <>
func F32NEQ(arg float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(F32, arg))
	})
}

// F32LT <
func F32LT(arg float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(F32, arg))
	})
}

// F32LET <=
func F32LTE(arg float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(F32, arg))
	})
}

// F32GT >
func F32GT(arg float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(F32, arg))
	})
}

// F32GTE >=
func F32GTE(arg float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(F32, arg))
	})
}

// F32In in(...)
func F32In(args ...float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(F32, v...))
	})
}

// F32NotIn not in(...)
func F32NotIn(args ...float32) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(F32, v...))
	})
}

// F64EQ  =
func F64EQ(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(F64, arg))
	})
}

// F64NEQ <>
func F64NEQ(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(F64, arg))
	})
}

// F64LT <
func F64LT(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(F64, arg))
	})
}

// F64LET <=
func F64LTE(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(F64, arg))
	})
}

// F64GT >
func F64GT(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(F64, arg))
	})
}

// F64GTE >=
func F64GTE(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(F64, arg))
	})
}

// F64In in(...)
func F64In(args ...float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(F64, v...))
	})
}

// F64NotIn not in(...)
func F64NotIn(args ...float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(F64, v...))
	})
}

// DecimalMysqlEQ  =
func DecimalMysqlEQ(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(DecimalMysql, arg))
	})
}

// DecimalMysqlNEQ <>
func DecimalMysqlNEQ(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(DecimalMysql, arg))
	})
}

// DecimalMysqlLT <
func DecimalMysqlLT(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(DecimalMysql, arg))
	})
}

// DecimalMysqlLET <=
func DecimalMysqlLTE(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(DecimalMysql, arg))
	})
}

// DecimalMysqlGT >
func DecimalMysqlGT(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(DecimalMysql, arg))
	})
}

// DecimalMysqlGTE >=
func DecimalMysqlGTE(arg float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(DecimalMysql, arg))
	})
}

// DecimalMysqlIn in(...)
func DecimalMysqlIn(args ...float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(DecimalMysql, v...))
	})
}

// DecimalMysqlNotIn not in(...)
func DecimalMysqlNotIn(args ...float64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(DecimalMysql, v...))
	})
}

// CharMEQ  =
func CharMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(CharM, arg))
	})
}

// CharMNEQ <>
func CharMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(CharM, arg))
	})
}

// CharMLT <
func CharMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(CharM, arg))
	})
}

// CharMLET <=
func CharMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(CharM, arg))
	})
}

// CharMGT >
func CharMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(CharM, arg))
	})
}

// CharMGTE >=
func CharMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(CharM, arg))
	})
}

// CharMIn in(...)
func CharMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(CharM, v...))
	})
}

// CharMNotIn not in(...)
func CharMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(CharM, v...))
	})
}

// CharMHasPrefix HasPrefix
func CharMHasPrefix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasPrefix(CharM, arg))
	})
}

// CharMHasSuffix HasSuffix
func CharMHasSuffix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasSuffix(CharM, arg))
	})
}

// CharMContains Contains
func CharMContains(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.Contains(CharM, arg))
	})
}

// VarcharMEQ  =
func VarcharMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(VarcharM, arg))
	})
}

// VarcharMNEQ <>
func VarcharMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(VarcharM, arg))
	})
}

// VarcharMLT <
func VarcharMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(VarcharM, arg))
	})
}

// VarcharMLET <=
func VarcharMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(VarcharM, arg))
	})
}

// VarcharMGT >
func VarcharMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(VarcharM, arg))
	})
}

// VarcharMGTE >=
func VarcharMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(VarcharM, arg))
	})
}

// VarcharMIn in(...)
func VarcharMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(VarcharM, v...))
	})
}

// VarcharMNotIn not in(...)
func VarcharMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(VarcharM, v...))
	})
}

// VarcharMHasPrefix HasPrefix
func VarcharMHasPrefix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasPrefix(VarcharM, arg))
	})
}

// VarcharMHasSuffix HasSuffix
func VarcharMHasSuffix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasSuffix(VarcharM, arg))
	})
}

// VarcharMContains Contains
func VarcharMContains(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.Contains(VarcharM, arg))
	})
}

// NvarcharMEQ  =
func NvarcharMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(NvarcharM, arg))
	})
}

// NvarcharMNEQ <>
func NvarcharMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(NvarcharM, arg))
	})
}

// NvarcharMLT <
func NvarcharMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(NvarcharM, arg))
	})
}

// NvarcharMLET <=
func NvarcharMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(NvarcharM, arg))
	})
}

// NvarcharMGT >
func NvarcharMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(NvarcharM, arg))
	})
}

// NvarcharMGTE >=
func NvarcharMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(NvarcharM, arg))
	})
}

// NvarcharMIn in(...)
func NvarcharMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(NvarcharM, v...))
	})
}

// NvarcharMNotIn not in(...)
func NvarcharMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(NvarcharM, v...))
	})
}

// NvarcharMHasPrefix HasPrefix
func NvarcharMHasPrefix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasPrefix(NvarcharM, arg))
	})
}

// NvarcharMHasSuffix HasSuffix
func NvarcharMHasSuffix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasSuffix(NvarcharM, arg))
	})
}

// NvarcharMContains Contains
func NvarcharMContains(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.Contains(NvarcharM, arg))
	})
}

// NcharMEQ  =
func NcharMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(NcharM, arg))
	})
}

// NcharMNEQ <>
func NcharMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(NcharM, arg))
	})
}

// NcharMLT <
func NcharMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(NcharM, arg))
	})
}

// NcharMLET <=
func NcharMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(NcharM, arg))
	})
}

// NcharMGT >
func NcharMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(NcharM, arg))
	})
}

// NcharMGTE >=
func NcharMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(NcharM, arg))
	})
}

// NcharMIn in(...)
func NcharMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(NcharM, v...))
	})
}

// NcharMNotIn not in(...)
func NcharMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(NcharM, v...))
	})
}

// NcharMHasPrefix HasPrefix
func NcharMHasPrefix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasPrefix(NcharM, arg))
	})
}

// NcharMHasSuffix HasSuffix
func NcharMHasSuffix(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.HasSuffix(NcharM, arg))
	})
}

// NcharMContains Contains
func NcharMContains(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.Contains(NcharM, arg))
	})
}

// TimeMEQ  =
func TimeMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(TimeM, arg))
	})
}

// TimeMNEQ <>
func TimeMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(TimeM, arg))
	})
}

// TimeMLT <
func TimeMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(TimeM, arg))
	})
}

// TimeMLET <=
func TimeMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(TimeM, arg))
	})
}

// TimeMGT >
func TimeMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(TimeM, arg))
	})
}

// TimeMGTE >=
func TimeMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(TimeM, arg))
	})
}

// TimeMIn in(...)
func TimeMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(TimeM, v...))
	})
}

// TimeMNotIn not in(...)
func TimeMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(TimeM, v...))
	})
}

// DateMEQ  =
func DateMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(DateM, arg))
	})
}

// DateMNEQ <>
func DateMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(DateM, arg))
	})
}

// DateMLT <
func DateMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(DateM, arg))
	})
}

// DateMLET <=
func DateMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(DateM, arg))
	})
}

// DateMGT >
func DateMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(DateM, arg))
	})
}

// DateMGTE >=
func DateMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(DateM, arg))
	})
}

// DateMIn in(...)
func DateMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(DateM, v...))
	})
}

// DateMNotIn not in(...)
func DateMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(DateM, v...))
	})
}

// DataTimeMEQ  =
func DataTimeMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(DataTimeM, arg))
	})
}

// DataTimeMNEQ <>
func DataTimeMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(DataTimeM, arg))
	})
}

// DataTimeMLT <
func DataTimeMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(DataTimeM, arg))
	})
}

// DataTimeMLET <=
func DataTimeMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(DataTimeM, arg))
	})
}

// DataTimeMGT >
func DataTimeMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(DataTimeM, arg))
	})
}

// DataTimeMGTE >=
func DataTimeMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(DataTimeM, arg))
	})
}

// DataTimeMIn in(...)
func DataTimeMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(DataTimeM, v...))
	})
}

// DataTimeMNotIn not in(...)
func DataTimeMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(DataTimeM, v...))
	})
}

// TimestampMEQ  =
func TimestampMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(TimestampM, arg))
	})
}

// TimestampMNEQ <>
func TimestampMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(TimestampM, arg))
	})
}

// TimestampMLT <
func TimestampMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(TimestampM, arg))
	})
}

// TimestampMLET <=
func TimestampMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(TimestampM, arg))
	})
}

// TimestampMGT >
func TimestampMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(TimestampM, arg))
	})
}

// TimestampMGTE >=
func TimestampMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(TimestampM, arg))
	})
}

// TimestampMIn in(...)
func TimestampMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(TimestampM, v...))
	})
}

// TimestampMNotIn not in(...)
func TimestampMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(TimestampM, v...))
	})
}

// TimestampUpdateEQ  =
func TimestampUpdateEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(TimestampUpdate, arg))
	})
}

// TimestampUpdateNEQ <>
func TimestampUpdateNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(TimestampUpdate, arg))
	})
}

// TimestampUpdateLT <
func TimestampUpdateLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(TimestampUpdate, arg))
	})
}

// TimestampUpdateLET <=
func TimestampUpdateLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(TimestampUpdate, arg))
	})
}

// TimestampUpdateGT >
func TimestampUpdateGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(TimestampUpdate, arg))
	})
}

// TimestampUpdateGTE >=
func TimestampUpdateGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(TimestampUpdate, arg))
	})
}

// TimestampUpdateIn in(...)
func TimestampUpdateIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(TimestampUpdate, v...))
	})
}

// TimestampUpdateNotIn not in(...)
func TimestampUpdateNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(TimestampUpdate, v...))
	})
}

// YearMEQ  =
func YearMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(YearM, arg))
	})
}

// YearMNEQ <>
func YearMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(YearM, arg))
	})
}

// YearMLT <
func YearMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(YearM, arg))
	})
}

// YearMLET <=
func YearMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(YearM, arg))
	})
}

// YearMGT >
func YearMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(YearM, arg))
	})
}

// YearMGTE >=
func YearMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(YearM, arg))
	})
}

// YearMIn in(...)
func YearMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(YearM, v...))
	})
}

// YearMNotIn not in(...)
func YearMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(YearM, v...))
	})
}

// BinaryMEQ  =
func BinaryMEQ(arg []byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(BinaryM, arg))
	})
}

// BinaryMNEQ <>
func BinaryMNEQ(arg []byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(BinaryM, arg))
	})
}

// BinaryMLT <
func BinaryMLT(arg []byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(BinaryM, arg))
	})
}

// BinaryMLET <=
func BinaryMLTE(arg []byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(BinaryM, arg))
	})
}

// BinaryMGT >
func BinaryMGT(arg []byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(BinaryM, arg))
	})
}

// BinaryMGTE >=
func BinaryMGTE(arg []byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(BinaryM, arg))
	})
}

// BinaryMIn in(...)
func BinaryMIn(args ...[]byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(BinaryM, v...))
	})
}

// BinaryMNotIn not in(...)
func BinaryMNotIn(args ...[]byte) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(BinaryM, v...))
	})
}

// BitMEQ  =
func BitMEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(BitM, arg))
	})
}

// BitMNEQ <>
func BitMNEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(BitM, arg))
	})
}

// BitMLT <
func BitMLT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(BitM, arg))
	})
}

// BitMLET <=
func BitMLTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(BitM, arg))
	})
}

// BitMGT >
func BitMGT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(BitM, arg))
	})
}

// BitMGTE >=
func BitMGTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(BitM, arg))
	})
}

// BitMIn in(...)
func BitMIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(BitM, v...))
	})
}

// BitMNotIn not in(...)
func BitMNotIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(BitM, v...))
	})
}

// EnumMEQ  =
func EnumMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(EnumM, arg))
	})
}

// EnumMNEQ <>
func EnumMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(EnumM, arg))
	})
}

// EnumMLT <
func EnumMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(EnumM, arg))
	})
}

// EnumMLET <=
func EnumMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(EnumM, arg))
	})
}

// EnumMGT >
func EnumMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(EnumM, arg))
	})
}

// EnumMGTE >=
func EnumMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(EnumM, arg))
	})
}

// EnumMIn in(...)
func EnumMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(EnumM, v...))
	})
}

// EnumMNotIn not in(...)
func EnumMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(EnumM, v...))
	})
}

// SetMEQ  =
func SetMEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(SetM, arg))
	})
}

// SetMNEQ <>
func SetMNEQ(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(SetM, arg))
	})
}

// SetMLT <
func SetMLT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(SetM, arg))
	})
}

// SetMLET <=
func SetMLTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(SetM, arg))
	})
}

// SetMGT >
func SetMGT(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(SetM, arg))
	})
}

// SetMGTE >=
func SetMGTE(arg string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(SetM, arg))
	})
}

// SetMIn in(...)
func SetMIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(SetM, v...))
	})
}

// SetMNotIn not in(...)
func SetMNotIn(args ...string) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(SetM, v...))
	})
}

// BoolMEQ  =
func BoolMEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.EQ(BoolM, arg))
	})
}

// BoolMNEQ <>
func BoolMNEQ(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.NEQ(BoolM, arg))
	})
}

// BoolMLT <
func BoolMLT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LT(BoolM, arg))
	})
}

// BoolMLET <=
func BoolMLTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.LTE(BoolM, arg))
	})
}

// BoolMGT >
func BoolMGT(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GT(BoolM, arg))
	})
}

// BoolMGTE >=
func BoolMGTE(arg int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s.Where(xsql.GTE(BoolM, arg))
	})
}

// BoolMIn in(...)
func BoolMIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.In(BoolM, v...))
	})
}

// BoolMNotIn not in(...)
func BoolMNotIn(args ...int64) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		if len(args) == 0 {
			s.Where(xsql.False())
			return
		}
		v := make([]interface{}, len(args))
		for i := range v {
			v[i] = args[i]
		}
		s.Where(xsql.NotIn(BoolM, v...))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...AllTypeTableWhere) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...AllTypeTableWhere) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p AllTypeTableWhere) AllTypeTableWhere {
	return AllTypeTableWhere(func(s *xsql.Selector) {
		p(s.Not())
	})
}
